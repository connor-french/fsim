initialize() {
// Population size
defineConstant("N", 500);

// Set 3 dimantions landscape
// The z dimension is used for phenotype
// Do we need z? Individuals not changing.
initializeSLiMOptions(dimensionality="xyz");

// What are you
defineConstant("sigma_K", 0.5);

// Genome things
initializeMutationRate(1e-6);
initializeMutationType("m1", 0.5, "f", 0.0); // neutral
// I think we don't want this for our model
initializeMutationType("m2", 0.5, "n", 0.0, 1.0); // QTL
m2.convertToSubstitution = F;
initializeGenomicElementType("g1", c(m1, m2), c(1, 0.1));
initializeGenomicElement(g1, 0, 1e5 - 1);
initializeRecombinationRate(1e-8);

// spatial competition
defineConstant("sigma_C", 0.1);
initializeInteractionType(1, "xyz", reciprocal=T,
maxDistance=sigma_C * 3); 
i1.setInteractionFunction("n", 1.0, sigma_C);

// mate choice
defineConstant("sigma_M", 0.1);
initializeInteractionType(2, "xyz", reciprocal=T,
maxDistance=sigma_M * 3); 
i2.setInteractionFunction("n", 1.0, sigma_M);
}

1 late() {
// Initialize one population with size N
sim.addSubpop("p1", N);
// Size of the landscape + phenotype (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
// Z is the landscape feature, would be suitabtility in our case
// Will run without this command, because [0,1] is default
p1.setSpatialBounds(c(0.0, 0.0, 0.0, 1.0, 1.0, 1.0));

// Simulating landscape
// Generate 25 random numbers between 0 and 1
defineConstant("mapValues", runif(25, 0, 1));
// Define the landscape using the 25 values in 5x5 grid, interpolated
p1.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
valueRange=c(0.0, 1.0), colors=c("red", "yellow"));

// Place individuals on the map 'randomly'
// Somehow these are adapted to red (0)
for (ind in p1.individuals)
ind.setSpatialPosition(p1.pointUniform());
// What is this line doing? Runs without it.
// Manual: "zero out their phenotype"
p1.individuals.z = 0.0;
}


modifyChild() {
// set offspring position based on parental position
do
// Get position of parent 1 in x,y (parent1.spatialPosition[0:1])
// Get two numbers from normal distribution with mean = 0 and sd = 0.005
// Add those babies together to get position of offspring 
// with z position = 0 ?
pos = c(parent1.spatialPosition[0:1] + rnorm(2, 0, 0.005), 0.0);
// Make sure offspring position is in bounds
while (!p1.pointInBounds(pos));
child.setSpatialPosition(pos);
return T;
}


1: late() {
// construct phenotypes from the additive effects of QTLs
inds = sim.subpopulations.individuals;
phenotype = inds.sumOfMutationsOfType(m2);
inds.z = phenotype;
// color individuals according to phenotype
inds.color = p1.spatialMapColor("map1", phenotype);
// evaluate interactions
i1.evaluate();
i2.evaluate();
}

fitness(m2) { // make QTLs intrinsically neutral
return 1.0;
}

fitness(NULL) { // reward proximity to the optimum
location = individual.spatialPosition[0:1];
optimum = subpop.spatialMapValue("map1", location);
return 1.0 + dnorm(optimum - individual.z, mean=0.0, sd=sigma_K);
}

fitness(NULL) { // phenotypic competition
totalStrength = sum(i1.strength(individual));
return 1.0 - totalStrength / p1.individualCount;
}

mateChoice() {
// spatial mate choice
return i2.strength(individual);
}

10000 late() {
sim.simulationFinished();
}