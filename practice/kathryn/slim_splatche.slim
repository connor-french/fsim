//This script assumes that the files you are reading in are placed in the ~/Desktop/test_files folder. If you put the files elsewhere, change the file paths accordingly


initialize() {
  initializeSLiMModelType("nonWF"); //initialize a non-Wright Fisher model
  defineConstant("m", 0.01); // migration rate
  defineConstant("e", 0.0); // subpopulation extinction rate
  
  initializeMutationType("m1", 0.5, "f", 0.0); //initialize neutral mutations
  m1.convertToSubstitution = T; //convert mutations to substitution type if they reach fixation
  
  initializeGenomicElementType("g1", m1, 1.0); //initialize a completely neutral genome
  initializeGenomicElement(g1, 0, 99999); //make the genome 100000 bp long
  initializeMutationRate(1e-7); //set the mutation rate
  initializeRecombinationRate(1e-8); //set the recombination rate
}
reproduction() {
  subpop.addCrossed(individual, subpop.sampleIndividuals(1)); //reproduce one offspring per individual per generation
}

1 early() {
  // Read in number of populations
  lines = readFile("~/Desktop/test_files/K.txt");
  N = length(lines);
  // Populate the first population with 100 individuals
    for (i in 1:N)
      sim.addSubpop(i, (i == 1) ? 100 else 0);
}

early() {

  // Read in pops and resist
  pops = readFile("~/Desktop/test_files/pops.txt");
  resist = readFile("~/Desktop/test_files/resist.txt");


  // random migration
  nIndividuals = sum(sim.subpopulations.individualCount);
  nMigrants = asInteger(nIndividuals * m);
  migrants = sample(sim.subpopulations.individuals, nMigrants);

  // Get pops to migration only with neighbors
  for (migrant in migrants) {
    dest = migrant.subpopulation;
    dest.id;

  //determine subpopulations the focal population can migrate into (part 1- get pop fields)
  for(line in pops){
    fields = strsplit(line, " ");
      if(dest.id==asInteger(fields[0]))
        tempAvail=fields[1:4];
  }
  
  //part 2- make a vector of available populations to move to
  avail=NULL;
  for(element in tempAvail){
    if(element != "NA")
      avail=c(avail,asInteger(element));
  }
  
  //determine resistance to movement from restistance file (part 1- get resistance fields)
  for(line in resist){
    fields = strsplit(line, " ");
    if(dest.id==asInteger(fields[0]))
      tempMig=fields[1:4];
  }

  //part 2- make a vector of resistance values
  mig=NULL;
  for(element in tempMig){
    if(element != "NA")
      mig=c(mig,asFloat(element));
  }

  //determine which population the migrant will move to based on the resistance value
  pop = sample(avail,1,weights=mig)-1;
  //pop = sample(avail,1)-1;
  dest = sim.subpopulations[pop];
  //do dest = sample(sim.subpopulations, 1);
  //while (dest == migrant.subpopulation);
  dest.takeMigrants(migrant);
  }

  // density-dependence and random extinctions.
  // Read in your K file and convert the K values into a vector
  lines = readFile("~/Desktop/test_files/K.txt");
  K=NULL;
  for(line in lines){
    components = strsplit(line,",");
    K = c(K, asInteger(components[0]));
  }
  
  //Scale the population fitness by K (density-dependence). 
  np=0;  
  for (subpop in sim.subpopulations){
    if (runif(1) < e)
      subpop.fitnessScaling = 0.0;
    else
      subpop.fitnessScaling = K[np] / subpop.individualCount;
    np=np+1;
  }

}

// It's possible for all of the populations to go extinct in non-WF models. This checks if that happens and warns you. Won't happen in our simulation
late() {
  if (sum(sim.subpopulations.individualCount) == 0)
    stop("Global extinction in generation " + sim.generation + "."); }
    
//Quit the simulation after 2000 generation and output a vcf of 100 randomly sampled individuals from the simulation
2000 late() {
  allIndividuals = sim.subpopulations.individuals;
  sampledIndividuals = sample(allIndividuals, 100);
  sampledIndividuals.genomes.outputVCF(filePath = "~/Desktop/test_files/slim_practice.vcf");
}